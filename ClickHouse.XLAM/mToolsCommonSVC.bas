Attribute VB_Name = "mToolsCommonSVC"
Option Explicit
Option Compare Text


Public strCodeKey As String
Public vActiveCell, vCurrQueryTime

Public Const vCurrPasswordLine = "PwasswordL@@ineGesdn$$eratedFrom@@MyHabd$$AndS$4oON"

 

#If VBA7 Then
 Declare PtrSafe Function GetCurrentProcessId Lib "Kernel32" () As LongPtr
#Else
 Public Declare Function GetCurrentProcessId Lib "Kernel32" () As Long
#End If

Function getCountWB() As Integer
    Dim i As Integer, n As Integer
        For i = 1 To Workbooks.Count
        DoEvents
            If Workbooks(i).Windows(1).Visible = True Then
                n = n + 1
            End If
        Next i
    getCountWB = n
End Function

Sub p_setExcelCalcOff()
    vCurrQueryTime = Now
     Application.EnableCancelKey = xlErrorHandler
    Application.ScreenUpdating = False
    Application.DisplayAlerts = False
    Application.Calculation = xlCalculationManual
    Application.EnableEvents = False
    ActiveSheet.DisplayPageBreaks = False
    ActiveSheet.UsedRange.EntireRow.Hidden = False
    Set vActiveCell = Range(ActiveCell.Address)
    Call p_ClearStatusBar
End Sub

Sub p_setExcelCalcOn()
   On Error Resume Next
  '  ActiveSheet.UsedRange.Select
  '  Selection.NumberFormat = "#,##0.00"
    vActiveCell.Select
    
    Application.EnableCancelKey = xlInterrupt
    Application.ScreenUpdating = True
    Application.DisplayAlerts = True
    Application.Calculation = xlCalculationAutomatic
    Application.EnableEvents = True
    ActiveSheet.DisplayPageBreaks = True
    ActiveSheet.UsedRange.EntireRow.Hidden = False
    Err.Clear
     ActiveSheet.Outline.ShowLevels RowLevels:=1
      Call p_WriteStatusBarTime
End Sub

Sub p_WriteStatusBarTime()
  
Application.StatusBar = " Exec Time: " & DateDiff("s", vCurrQueryTime, Now) & " sec "
 
End Sub

Sub p_ClearStatusBar()
On Error Resume Next
    Application.StatusBar = False
End Sub

Function svc_GetMemUsage()
Dim objSWbemServices
  
  ' Returns the current Excel.Application
  ' memory usage in MB
  
  Set objSWbemServices = GetObject("winmgmts:")
  svc_GetMemUsage = objSWbemServices.get("Win32_Process.Handle='" & GetCurrentProcessId & "'").WorkingSetSize / 1024
    
  Set objSWbemServices = Nothing
  
End Function
 
Sub p_ErrorHandler(vErrNum As Long, p As String)

Dim vErrStr

Dim vButton
Dim vErrorHandler
 vErrStr = ""
 
   If (Err.Number <> 0) Then
       vErrStr = vErrStr & "Error # " & Str(Err.Number) & " was generated by " _
         & Err.source & vbCrLf & "Error Line: " & Erl & vbCrLf & Err.Description
       vButton = vbCritical
    End If

 

 vButton = vbCritical
 vErrorHandler = "Error"
 
 If (Err.Number = 0) Then
   vButton = vbExclamation
   vErrorHandler = "Warning"
 End If
 
 If vErrStr <> "" Then
    MsgBox vErrStr, vButton, vErrorHandler
 End If
  
If Err.Number > 0 Then
   Err.Clear
End If

End Sub


 
